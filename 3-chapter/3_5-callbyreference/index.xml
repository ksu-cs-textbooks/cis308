<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Call by Reference :: CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/3-chapter/3_5-callbyreference/index.html</link><description>C functions are naturally call-by-value, which means that we don’t pass variables themselves – we pass their value. So, if we modify one of the parameters in our function, it does not modify the original variable passed to the function. Consider the following example:
//This example doesn’t work! void swap(int a, int b) { int temp = a; a = b; b = temp; } //assume the test code below is in another function int x = 3; int y = 4; swap(x, y); This code fragment is supposed to swap the values in x and y, so that x == 4 and y == 3. However, when we call swap, only the VALUES 3 and 4 are passed – not x and y themselves. The values 3 and 4 get bound to the function parameters a and b. By the end of the function, we do have that a == 4 and b == 3. However, x and y don’t change because they are completely different from a and b. If we do want to change x and y, we need to pass in the address of x and the address of y. Then, we can update the values at those memory locations. Here is our revised swap function:</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis308/3-chapter/3_5-callbyreference/index.xml" rel="self" type="application/rss+xml"/></channel></rss>