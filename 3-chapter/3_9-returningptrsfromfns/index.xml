<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Returning Pointers from Functions :: CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/3-chapter/3_9-returningptrsfromfns/index.html</link><description>We can also return pointers from functions via pointer arguments rather than as the formal return value. To explain this, let’s first step back and consider the case of returning a simple type, such as int, from a function via a pointer argument.
If we write the function:
void f(int *ip) { *ip = 5; } And then call it like this:
int i; f(&amp;i); then f will “return” the value 5 by writing it to the location specified by the pointer passed by the caller; in this case, to the caller’s variable i. A function might “return” values in this way if it had multiple things to return, since a function can only have one formal return value (that is, it can only return one value via the return statement.) The important thing to notice is that for the function to return a value of type int, it used a parameter of type pointer-to-int.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis308/3-chapter/3_9-returningptrsfromfns/index.xml" rel="self" type="application/rss+xml"/></channel></rss>