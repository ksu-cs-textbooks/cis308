<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/index.html</link><description>Julie Thornton
Computer Science Department
Kansas State University
Email: juliet@ksu.edu
This is the textbook for CIS 308, C Language Lab, at Kansas State University. The course assumes students have significant programming background in a high-level language like C# or Java. It also assumes familiarity with common data structures (linked lists, stacks, queues, binary search trees, hash tables, and graphs) and their implementations.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis308/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://textbooks.cs.ksu.edu/cis308/0-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/0-chapter/index.html</guid><description/></item><item><title>C Basics</title><link>https://textbooks.cs.ksu.edu/cis308/1-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/1-chapter/index.html</guid><description/></item><item><title>Arrays, Strings, and Files</title><link>https://textbooks.cs.ksu.edu/cis308/2-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/2-chapter/index.html</guid><description/></item><item><title>Pointers and Dynamic Memory</title><link>https://textbooks.cs.ksu.edu/cis308/3-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/3-chapter/index.html</guid><description/></item><item><title>Structs</title><link>https://textbooks.cs.ksu.edu/cis308/4-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/4-chapter/index.html</guid><description/></item><item><title>Multiple Files</title><link>https://textbooks.cs.ksu.edu/cis308/5-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/5-chapter/index.html</guid><description>Up to this point, all of our programs have been written within a single file. There is nothing wrong with this – a C program is just a bunch of functions, and it’s fine to group those functions within a single file. However, as your programs get bigger, it’s nice to physically separate functions into different files. This makes it easier to find certain pieces of your program.
Separating functions also promotes reuse. Right now, if we wanted to reuse a function we’d written in another program, we would have to copy it from our old program to our new one. With multiple files, we can separate the functions we want reused and just link to that file when we want to use them (this is like separating the C library functions and including them when we want to use them).</description></item><item><title>User-Defined Types</title><link>https://textbooks.cs.ksu.edu/cis308/6-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/6-chapter/index.html</guid><description/></item><item><title>Pointers to Functions</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:05 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/7-chapter/index.html</guid><description>The	pointers we	have looked	at	so	far	have	all	been	pointers	to	various	types	of	data	objects, (such	as	int,	char,	double,	struct	person,	and	pointer-to-int),	but	it	is	also	possible	to	have pointers	to	functions.	Pointers	to	functions	are	useful	for	approximately	the	same	reasons	as pointers	to	data:	when	you	want	an	extra	level	of	indirection, or	when	you’d	like	the	same	piece	of code	to	call	different	functions	depending	on	circumstances.</description></item></channel></rss>