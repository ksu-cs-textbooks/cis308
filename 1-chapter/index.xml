<?xml version="1.0" encoding="utf-8" standalone="yes"?>




	
	
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			

	
	
			
			
			

	
	
			

	
	
			
			

	
	
			
			

	
	
			
			

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Basics on CIS 308 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/</link>
    <description>Recent content in C Basics on CIS 308 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis308/1-chapter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello, World</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_1-helloworld/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_1-helloworld/</guid>
      <description>The first program students write in any new language is the &amp;ldquo;Hello, World&amp;rdquo; program. Here’s how it looks in C:
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello, World!\n&amp;#34;); return 0; } To write and run this program see the Tools Guide in section 0.1 for more information. It should print &amp;ldquo;Hello, World!&amp;rdquo; to the console.</description>
    </item>
    <item>
      <title>Variables</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_2-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_2-variables/</guid>
      <description>Declaring Variables Variables in C are declared exactly like variables in Java or C#. Just say:
type name; where type is the type of the variable, and name is its name. The most common types in C are:
int double float char Notice that C does not have a boolean type or a string type. Some examples:
int num; char c; double val; Initializing Variables To initialize:
name = value; Where name is the name of the variable, and value is the value you want to store in it.</description>
    </item>
    <item>
      <title>Printing</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_3-printing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_3-printing/</guid>
      <description>printf Function As you&amp;rsquo;ve seen, the printf function is used to display output in C. For example, to display a string of text:
printf(&amp;#34;Hello\n&amp;#34;); Note that you always need to specify the newline character (\n). There is no println equivalent in C.
Printing Variables Printing variables works a bit differently. First, you specify the kind of variable that&amp;rsquo;s going to be printed (called a control string). Then, outside the string, you give the corresponding variable name.</description>
    </item>
    <item>
      <title>User Input</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_4-userinput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_4-userinput/</guid>
      <description>User input in C is, in short, a pain. There are three major input functions: getchar(), scanf(...), and fgets(...). To use any of these functions, you must include the stdio.h library.
getchar() The getchar() function takes no arguments and returns the very next character in the standard input stream. If there are no more characters in the input stream, it returns the constant EOF.
Here&amp;rsquo;s an example that reads a student&amp;rsquo;s letter grade and then prints it back to the console.</description>
    </item>
    <item>
      <title>Selection Structures</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_5-selectionstructures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_5-selectionstructures/</guid>
      <description>C has if-statements and switch statements that work just like those in Jav and C#.
Here is a sample if-statement:
int age; //initialize age //print either Child, Teenager, or Adult, depending on age if (num &amp;lt; 11) { printf(&amp;#34;Child\n&amp;#34;); } else if (num &amp;lt; 18) { printf(&amp;#34;Teenager\n&amp;#34;); } else printf(&amp;#34;Adult\n&amp;#34;); Here is a sample switch statement. The expression in the switch clause must evaluate to either a character or an integer:</description>
    </item>
    <item>
      <title>Loops</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_6-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_6-loops/</guid>
      <description>There are three kinds of loops in C – while, do-while, and for. Their syntax is exactly the same as loops in Java and C#.
While Loop The code in a while loop executes repeatedly until a specified condition becomes false. If the condition is false before the first execution of the loop, then the entire loop will be skipped.
This example will read and print every character typed by the user (up until they press enter):</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_7-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_7-functions/</guid>
      <description>Functions in C are very similar to methods in other languages, except functions are not associated with any class. (They are like static methods in Java and C#.) They take a number of parameters, perform on operation on those parameters, and may or may not return a value.
Function Prototypes Some C compilers will complain if they see a call to a function before they’ve seen the function itself. To avoid this problem, it’s best to include a prototype for a function at the top of the file, and then to implement it someplace else in the file.</description>
    </item>
    <item>
      <title>Global Variables</title>
      <link>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_8-globalvariables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis308/1-chapter/1_8-globalvariables/</guid>
      <description>All the variables we’ve seen so far have been local variables – variables that are defined within a function. These variables are only visible within that function.
Consider this function:
int count(void) { int sum = 0; sum++; return sum; } Each time we call count, the sum variable is set back to 0, and the return value is 1. sum does not retain its value across function calls.
If we did want this function to keep track of how many times it had been called, we could store sum as a global variable.</description>
    </item>
  </channel>
</rss>