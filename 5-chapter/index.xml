<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Multiple Files :: CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/5-chapter/index.html</link><description>Up to this point, all of our programs have been written within a single file. There is nothing wrong with this – a C program is just a bunch of functions, and it’s fine to group those functions within a single file. However, as your programs get bigger, it’s nice to physically separate functions into different files. This makes it easier to find certain pieces of your program.
Separating functions also promotes reuse. Right now, if we wanted to reuse a function we’d written in another program, we would have to copy it from our old program to our new one. With multiple files, we can separate the functions we want reused and just link to that file when we want to use them (this is like separating the C library functions and including them when we want to use them).</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2024 14:09:49 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis308/5-chapter/index.xml" rel="self" type="application/rss+xml"/><item><title>Header Files</title><link>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_1-headerfiles/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_1-headerfiles/index.html</guid><description>Our first step in writing a program with multiple files is to just divide related functions into different .c files. However, suppose we’re in our main function and we call a function from a different file? This is just like calling a C library function without using any include statements. The compiler will not know where to find the outside function.
To solve this within the C libraries, function prototypes are placed in header files (.h files). The functions themselves are implemented in corresponding .c files. If I want to use a C library function, I include the appropriate header file so that the compiler knows about the function.</description></item><item><title>Makefiles</title><link>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_2-makefiles/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_2-makefiles/index.html</guid><description>It now takes three lines to compile our program, which is a pain to have to type every time we make a change. We can simplify compilation by placing all of the compilation instructions in a single file called a Makefile (with NO extension).
Here is the format of a Makefile: compiler declaration compiler flags declaration executable name declaration header list declaration object list declaration compiling/linking instruction cleaning instruction (removing output files) (There are many other options for creating Makefiles, but we will use the template above in this class.) Here is the Makefile for our statistics program</description></item><item><title>Extern Variables</title><link>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_3-externvariables/index.html</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/5-chapter/5_3-externvariables/index.html</guid><description>Sometimes when our program is in multiple files, we still want to define variables that are visible to each file. Here’s how to do this:
Declare the global variable in a .h file. This can either be done in a .h file with some of your function prototypes, or in a special file, globals.h, that contains the declarations of all global variables. If you do use a special globals header file, it does not need a corresponding .c file. Include the .h file wherever you want to use the variable When you want to use the variable, declare: extern type name; where type is the type of the global variable, and name is its name. The extern keyword tells the compiler not to create a new variable, but instead to find the variable name declared in another file.</description></item></channel></rss>