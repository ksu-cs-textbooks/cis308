<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pointers to Functions :: CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/</link><description>The	pointers we	have looked	at	so	far	have	all	been	pointers	to	various	types	of	data	objects, (such	as	int,	char,	double,	struct	person,	and	pointer-to-int),	but	it	is	also	possible	to	have pointers	to	functions.	Pointers	to	functions	are	useful	for	approximately	the	same	reasons	as pointers	to	data:	when	you	want	an	extra	level	of	indirection, or	when	you’d	like	the	same	piece	of code	to	call	different	functions	depending	on	circumstances.</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 25 Apr 2023 07:06:01 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis308/7-chapter/index.xml" rel="self" type="application/rss+xml"/><item><title>Function Pointer Basics</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_1-fnptrbasics/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_1-fnptrbasics/</guid><description>Declaration Syntax Here is the syntax for declaring a function pointer:
return_type (*ptr_name) (args);This declares ptr_name as a pointer to a function that returns something of type return_type and that takes the argument types described in args. Here, args is a comma-separated lists of the argument types for a function. For example, args would be (int, double) for a function that took two arguments – an int followed by a double.</description></item><item><title>Functions and Function Pointers</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_2-fn_fnptr/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_2-fn_fnptr/</guid><description>Since a function pointer is a valid type, we can pass function pointers as arguments to functions and can also return them from functions.
Passing Function Pointers to Functions Recall that the syntax for declaring a function ponter is:
return_type (*ptr_name) (args);Where ptr_name is the new variable name for a function pointer that returns something of type return_type and that takes the argument types described in args. We can similarly accept a function pointer as an argument to a function using the same syntax.</description></item><item><title>Arrays of Function Pointers</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_3-arraysfnptrs/</link><pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate><guid>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_3-arraysfnptrs/</guid><description>We can declare arrays of function pointers using the same syntax we use to create arrays of any other type. As we saw in the previous section, it is often easier to first rename our function pointer using typedef, and then to use that new type when declaring an array.
Consider our operations functions and newly created function type from the previous section:
//'function' is the name of a new function pointer type //describing a function that returns an int and takes two int arguments typedef int (*function) (int, int); int plus(int a, int b) { return a + b; } int minus(int a, int b) { return a - b; } int times(int a, int b) { return a * b; } int divide(int a, int b) { return a / b; }Since each operation function is the same type, we can create an array of these four function pointers.</description></item></channel></rss>