<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arrays of Function Pointers :: CIS 308 Textbook</title><link>https://textbooks.cs.ksu.edu/cis308/7-chapter/7_3-arraysfnptrs/index.html</link><description>We can declare arrays of function pointers using the same syntax we use to create arrays of any other type. As we saw in the previous section, it is often easier to first rename our function pointer using typedef, and then to use that new type when declaring an array.
Consider our operations functions and newly created function type from the previous section:
//'function' is the name of a new function pointer type //describing a function that returns an int and takes two int arguments typedef int (*function) (int, int); int plus(int a, int b) { return a + b; } int minus(int a, int b) { return a - b; } int times(int a, int b) { return a * b; } int divide(int a, int b) { return a / b; } Since each operation function is the same type, we can create an array of these four function pointers. We can then ask the user to enter an array index corresponding to the desired operation, and access the appropriate function pointer to execute the operation:</description><generator>Hugo</generator><language>en-us</language><lastBuildDate/><atom:link href="https://textbooks.cs.ksu.edu/cis308/7-chapter/7_3-arraysfnptrs/index.xml" rel="self" type="application/rss+xml"/></channel></rss>